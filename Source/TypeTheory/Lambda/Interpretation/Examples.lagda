
\begin{code}[hide]
{-# OPTIONS --cubical  #-}

open import TypeTheory.Lambda.Base
open import TypeTheory.Lambda.Param

module TypeTheory.Lambda.Interpretation.Examples where
\end{code}


\begin{code}[hide]
Const : ùí∞‚ÇÄ
Const = ‚ä§ + ‚Ñï

ctype : Const -> Bool
ctype = either (const false) (const true)


param : LambdaParam (lsuc lzero) lzero
param = lambdaParam Bool Bool-isDisc Const ctype

M : Bool -> ùí∞‚ÇÄ
M false = ‚ä§
M true = ‚Ñï

Mc : (a : ‚ä§ + ‚Ñï) -> Lift {j = lzero} ‚ä§ -> M (ctype a)
Mc (left x) t = tt
Mc (right x) t = x

model : Model (lsuc lzero) lzero
model = lambdaModel param (ùêìùê≤ùê©ùêû lzero) Type-isCCC M (Mc)
\end{code}

\begin{code}[hide]
open import TypeTheory.Lambda.Core {param = param}
open import TypeTheory.Lambda.Typing {param = param}
open import TypeTheory.Lambda.Reduction {param = param}
open import TypeTheory.Lambda.Interpretation.Interpretation {model = model}
\end{code}

\begin{code}

NF : Ty
NF = Œπ true ‚áí Œπ true

compT : [] ‚ä¢ Œõ NF (Œõ NF (Œõ (Œπ true) (V 2 $$ (V 1 $$ V 0)))) :: NF ‚áí NF ‚áí NF
compT = tt ,fir, refl

compN : (‚Ñï -> ‚Ñï) -> (‚Ñï -> ‚Ñï) -> ‚Ñï -> ‚Ñï
compN f g x = f (g x)

idT : [] ‚ä¢ Œõ (Œπ true) (V 0) :: NF
idT = tt ,fir, refl

idN : ‚Ñï -> ‚Ñï
idN x = x

-- th1 : J‚ü¶ idT ‚üß == const idN
-- th1 = refl

-- th2 : J‚ü¶ compT ‚üß == const compN
-- th2 = refl

\end{code}
