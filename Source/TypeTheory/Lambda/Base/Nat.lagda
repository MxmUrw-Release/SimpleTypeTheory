

We define the natural numbers ‚Ñï as.

\begin{code}[hide]


{-# OPTIONS --cubical #-}

module TypeTheory.Lambda.Base.Nat where



open import TypeTheory.Lambda.Base.Import
open import TypeTheory.Lambda.Base.TypeProperties


----------------------------------------------------------------------
-- Operations

pred : ‚Ñï ‚Üí ‚Ñï
pred zero     = zero
pred (suc n)  = n

-- CITE: from mort-ctt
zNotS : {n : ‚Ñï} ‚Üí (‚Ñï.zero == suc n) ‚Üí ‚ä•
zNotS {n} p = subst {P = P} p zero
  where P : ‚Ñï ‚Üí ùí∞‚ÇÄ
        P zero     = ‚Ñï
        P (suc _)  = ‚ä•
-- CITE end


iNotSi : {i : ‚Ñï} -> i == suc i -> ‚ä•
iNotSi {zero}     = zNotS
iNotSi {suc i} p  = iNotSi {i = i} (cong pred p)

add-zero-r : (k : ‚Ñï) -> (k S+ 0) == k
add-zero-r zero     = refl
add-zero-r (suc k)  = cong suc (add-zero-r k)

add-suc-r : (k a : ‚Ñï) -> (k S+ (suc a)) == suc (k S+ a)
add-suc-r zero a     = refl
add-suc-r (suc k) a  = cong suc (add-suc-r k a)

assoc : (a b c : ‚Ñï) -> (a S+ b) S+ c == a S+ (b S+ c)
assoc zero b c     = refl
assoc (suc a) b c  = cong suc (assoc a b c)

comm : (a b : ‚Ñï) -> a S+ b == b S+ a
comm zero b     = sym (add-zero-r b)
comm (suc a) b  = cong suc (comm a b) ‚àô (sym (add-suc-r b a))

add-inj : (k l a : ‚Ñï) -> (k S+ a == l S+ a) -> k == l
add-inj k l zero p     = (sym (add-zero-r k)) ‚àô p ‚àô (add-zero-r l)
add-inj k l (suc a) p  = add-inj k l a (cong pred ((sym (add-suc-r k a)) ‚àô p ‚àô (add-suc-r l a)))

----------------------------------------------------------------------
-- isSet


-- CITE: from mort-ctt
‚ÑïPath-isDec : (n m : ‚Ñï) ‚Üí isDec (Path n m)
‚ÑïPath-isDec zero zero        = yes refl
‚ÑïPath-isDec zero (suc m)     = no zNotS
‚ÑïPath-isDec (suc n) zero     = no (zNotS ‚àò sym)
‚ÑïPath-isDec (suc n) (suc m)  = mapDec (cong suc) (cong pred) (‚ÑïPath-isDec n m)

‚Ñï-isDisc = ‚ÑïPath-isDec

-- CITE: mort-ctt
‚Ñï-isSet : isSet ‚Ñï
‚Ñï-isSet = hedberg ‚ÑïPath-isDec


----------------------------------------------------------------------
-- ‚ÑïOrd (_<_)

--------------------------------------
-- Definition
-- CITE: agda-prelude (LessNat)
record ‚ÑïOrd (n m : ‚Ñï) : ùí∞‚ÇÄ where
  constructor diff
  field
    diff-k : ‚Ñï
    diff-p : m == suc diff-k S+ n
open ‚ÑïOrd

syntax ‚ÑïOrd n m = n < m

_>_ : ‚Ñï -> ‚Ñï -> ùí∞‚ÇÄ
m > n = n < m


--------------------------------------
-- Operations

pred-monotone : {i n : ‚Ñï} -> (lep : (suc i) < (suc n)) -> i < n
pred-monotone {i} {n} (diff k p) = diff k ((cong pred p) ‚àô (add-suc-r k i))

suc-monotone : ‚àÄ{k l : ‚Ñï} -> k < l -> suc k < suc l
suc-monotone {k} {l} (diff d pd) = diff d (cong suc (pd ‚àô (sym (add-suc-r d k))))

less-antirefl : ‚àÄ{n : ‚Ñï} -> n < n -> ‚ä•
less-antirefl {zero} (diff k kp) = zNotS kp
less-antirefl {suc n} (kp) = less-antirefl (pred-monotone kp)

less-antisym : ‚àÄ{n m : ‚Ñï} -> n < m -> m < n -> ‚ä•
less-antisym {n} {m} (diff k kp) (diff l lp) = less-antirefl (diff (suc (l S+ k)) proof)
  where
    proof : n == suc (suc (l S+ k) S+ n)
    proof = n                          ‚â°‚ü® lp ‚ü©
            suc (l S+ m)               ‚â°‚ü® cong (Œª Œæ -> suc (l S+ Œæ)) kp ‚ü©
            suc (l S+ (suc (k S+ n)))  ‚â°‚ü® cong suc (add-suc-r l (k S+ n)) ‚ü©
            suc (suc (l S+ (k S+ n)))  ‚â°‚ü® cong (suc ‚àò suc) (sym (assoc l k n)) ‚ü©
            suc (suc ((l S+ k) S+ n))  ‚àé



-- Comparison
-- CITE: agda-prelude
data Comparison (a b : ‚Ñï) : ùí∞‚ÇÄ where
  less     : (a < b) -> Comparison a b
  equal    : (a == b) -> Comparison a b
  greater  : (b < a) -> Comparison a b

compare : (a b : ‚Ñï) -> Comparison a b
compare zero zero = equal refl
compare (suc a) zero = greater (diff a (cong suc (sym (add-zero-r a))))
compare zero (suc b) = less (diff b (cong suc (sym (add-zero-r b))))
compare (suc a) (suc b) with compare a b
...                        | less (kp) = less (suc-monotone kp)
...                        | equal p = equal (cong suc p)
...                        | greater (kp) = greater (suc-monotone kp)



choose : {A : ùí∞‚ÇÄ} -> (m n : ‚Ñï) -> (m < n -> A) -> A -> A
choose m n a b with compare m n
... | less p     = a p
... | equal _    = b
... | greater _  = b


lessEqual-‚ä• : {i j : ‚Ñï} -> (i < j) -> (i == j) -> ‚ä•
lessEqual-‚ä• {i} {j} i<j i=j = less-antirefl (subst {P = Œª x -> x < j} i=j i<j)


lessGreater-‚ä• : {i j : ‚Ñï} -> (i < j) -> (i > j) -> ‚ä•
lessGreater-‚ä• i<j i>j = less-antisym i>j i<j

lessZero-‚ä• : {i : ‚Ñï} -> (i < 0) -> ‚ä•
lessZero-‚ä• (diff k kp) = zNotS kp


data EqComp {A : ùí∞‚ÇÄ} (a b : A) : ùí∞‚ÇÄ where
  equal : (a == b) -> EqComp a b
  noteq : (a == b -> ‚ä•) -> EqComp a b

compare-eq : (a b : ‚Ñï) -> EqComp a b
compare-eq a b with compare a b
compare-eq a b | less x = noteq $ lessEqual-‚ä• x
compare-eq a b | equal x = equal x
compare-eq a b | greater x = noteq $ (lessEqual-‚ä• x ‚àò sym)




--------------------------------------
-- Ord Jungling

mkNotZero : {i j : ‚Ñï} -> i < j -> 0 < j
mkNotZero {zero} (d) = d
mkNotZero {suc i} (diff k kp) = mkNotZero (diff (suc k) (kp ‚àô cong suc (add-suc-r k i)))

-- abstract
killLeSuc2 : {j x n : ‚Ñï} -> (p : j < x) -> (q : x < (suc n)) -> j < n
killLeSuc2 {j} {x} {n} (diff k p) (diff l q) = diff (l S+ k) proof
  where
    proof : n == suc (l S+ k S+ j)
    proof = n                      ‚â°‚ü® cong pred q ‚ü©
            (l S+ x)               ‚â°‚ü® cong (Œª Œæ -> (l S+ Œæ)) p ‚ü©
            l S+ suc (k S+ j)      ‚â°‚ü® (add-suc-r l (k S+ j))  ‚ü©
            suc (l S+ (k S+ j))    ‚â°‚ü® cong suc (sym (assoc l k j)) ‚ü©
            suc (l S+ k S+ j)      ‚àé

killLeSuc = killLeSuc2


eq-to-leq : {i j : ‚Ñï} -> i == j -> i < suc j
eq-to-leq {i} {j} p = diff zero (cong suc (sym p))

lt-to-leq : {i j : ‚Ñï} -> i < j -> i < suc j
lt-to-leq {i} {j} (diff k kp) = diff (suc k) (cong suc kp)

0<suc : {i : ‚Ñï} -> 0 < suc i
0<suc {i} = diff i (cong suc (sym (add-zero-r i)))


--------------------------------------
-- Type Properties

‚ÑïOrd-isProp : {a b : ‚Ñï} -> isProp (a < b)
‚ÑïOrd-isProp {a} {b} (diff k kp) (diff l lp) i = diff (k=l i) (kp=kl i)
  where

    --------------------------------------
    -- Part I.
    -- Prove equality of the first component
    -- of the tuple.
    --
    k=l : k == l
    k=l = add-inj k l a (cong pred ((sym kp) ‚àô lp))


    --------------------------------------
    -- Part II.
    -- Prove (dependent) equality of the
    -- second part of the tuple. That is,
    -- of the equation b == S x + a.
    eq : ‚Ñï -> ùí∞‚ÇÄ
    eq x = b == suc x S+ a

    xlp : b == suc l S+ a
    xlp = subst {P = eq} k=l kp

    xlp=lp : xlp == lp
    xlp=lp = ‚Ñï-isSet b (suc l S+ a) xlp lp

    kp=xlp : PathP (Œª i -> eq (k=l (i))) kp xlp
    kp=xlp i = (subst-prop {P = eq} l k=l kp) (~ i)


    kp=kl : PathP (Œª i -> b == suc (k=l i) S+ a) kp lp
    kp=kl i j = primComp (Œª _ -> ‚Ñï)
                         _
                         (Œª { h (i = i0) -> kp (j)
                            ; h (i = i1) -> xlp=lp h (j)
                            ; h (j = i0) -> b
                            ; h (j = i1) -> suc (k=l i) S+ a
                         })
                         (kp=xlp i (j))




\end{code}
